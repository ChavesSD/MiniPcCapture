"""
Configura√ß√£o para compila√ß√£o com Auto-PY-to-EXE
Execute este arquivo para gerar automaticamente o execut√°vel
"""

import subprocess
import sys
import os

def build_executable():
    """
    Compila o execut√°vel usando PyInstaller com as configura√ß√µes corretas
    """
    
    # Verificar se PyInstaller est√° instalado
    try:
        import PyInstaller
        print("‚úì PyInstaller encontrado")
    except ImportError:
        print("‚ùå PyInstaller n√£o encontrado. Instalando...")
        subprocess.run([sys.executable, "-m", "pip", "install", "pyinstaller"])
    
    # Comando PyInstaller
    cmd = [
        "pyinstaller",
        "--onedir",                    # Criar pasta com execut√°vel
        "--windowed",                  # Sem console (GUI only)
        "--name", "MiniPcCapture",     # Nome do execut√°vel
        "--icon", "icon.ico" if os.path.exists("icon.ico") else None,  # √çcone (se existir)
        "--add-data", "platform-tools;platform-tools",  # Incluir pasta platform-tools
        "--distpath", "dist",          # Pasta de sa√≠da
        "--workpath", "build",         # Pasta de trabalho
        "--specpath", ".",             # Pasta do spec
        "main.py"                      # Arquivo principal
    ]
    
    # Remover None do comando
    cmd = [item for item in cmd if item is not None]
    
    print("üîß Compilando execut√°vel...")
    print(f"Comando: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True)
        print("\n‚úÖ Compila√ß√£o conclu√≠da com sucesso!")
        print(f"üìÅ Execut√°vel criado em: dist/MiniPcCapture/")
        print("üìã Arquivo principal: MiniPcCapture.exe")
        
        # Verificar se execut√°vel foi criado
        exe_path = "dist/MiniPcCapture/MiniPcCapture.exe"
        if os.path.exists(exe_path):
            print(f"‚úì Execut√°vel confirmado: {exe_path}")
            
            # Verificar se platform-tools foi inclu√≠do
            platform_tools_path = "dist/MiniPcCapture/platform-tools"
            if os.path.exists(platform_tools_path):
                print("‚úì Platform-tools inclu√≠do corretamente")
            else:
                print("‚ö† AVISO: Platform-tools pode n√£o ter sido inclu√≠do")
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro na compila√ß√£o: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("=" * 50)
    print("  COMPILADOR - MiniPc Capture")
    print("=" * 50)
    
    # Verificar arquivos necess√°rios
    if not os.path.exists("main.py"):
        print("‚ùå Arquivo main.py n√£o encontrado!")
        sys.exit(1)
    
    if not os.path.exists("platform-tools"):
        print("‚ùå Pasta platform-tools n√£o encontrada!")
        print("   Certifique-se de que a pasta platform-tools est√° no diret√≥rio atual")
        sys.exit(1)
    
    print("‚úì Arquivos necess√°rios encontrados")
    
    # Perguntar se quer prosseguir
    response = input("\nDeseja compilar o execut√°vel? (s/n): ")
    if response.lower() == 's':
        success = build_executable()
        if success:
            print("\nüéâ SUCESSO! Execut√°vel pronto para distribui√ß√£o!")
            print("\nüìã INSTRU√á√ïES:")
            print("1. Copie toda a pasta 'dist/MiniPcCapture/' para onde quiser")
            print("2. Execute 'MiniPcCapture.exe' na pasta copiada")
            print("3. O ADB j√° est√° inclu√≠do, n√£o precisa instalar nada!")
        else:
            print("\n‚ùå Falha na compila√ß√£o. Verifique os erros acima.")
    else:
        print("Compila√ß√£o cancelada.") 